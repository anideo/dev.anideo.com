<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>com.anideo.dev</title>
 <link href="http://dev.anideo.com/atom.html" rel="self"/>
 <link href="http://dev.anideo.com/"/>
 <updated>2012-01-19T15:12:06+08:00</updated>
 <id>http://dev.anideo.com/</id>
 <author>
   <name>The Anideo Developer Team</name>
   <email>dev@anideo.com</email>
 </author>

 
 <entry>
   <title>Simple Windowing and Ranking on Postgres &ndash; Or a Behind-The-Scenes look at GitHeroes</title>
   <link href="http://dev.anideo.com/2012/01/19/simple-windowing-and-ranking-on-postgres-or-a-behind-the-scenes-look-at-githeroes.html"/>
   <updated>2012-01-19T00:00:00+08:00</updated>
   <id>http://dev.anideo.com/2012/01/19/simple-windowing-and-ranking-on-postgres-or-a-behind-the-scenes-look-at-githeroes</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2012/01/19/simple-windowing-and-ranking-on-postgres-or-a-behind-the-scenes-look-at-githeroes.html&quot;&gt;Simple Windowing and Ranking on Postgres &amp;ndash; Or a Behind-The-Scenes look at GitHeroes&lt;/a&gt;&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;19 Jan 2012 &amp;#8211; Singapore&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d written this down a while ago about an app that I thought would be cool &amp;#8211; l33tornot.com. The concept is basically centered around voting for hackers you thought were l33t &amp;#8211; the idea was to be completely harmless and meant out of curiosity as to whom people would vote for.&lt;/p&gt;
&lt;p&gt;But there were complications &amp;#8211; who was eligible? How would you handle duplicates ? How would you avoid election fraud &amp;#8211; authenticating with Twitter, Facebook or something else? Also how do you handle the case where a larger-than-life character overshadows your personal hero based in tiny Singapore?&lt;/p&gt;
&lt;p&gt;These problems put a dampener on my efforts but I was determined not to let this idea pass &amp;#8211; and so on New Years&amp;#8217; Eve (after much thought for the previous two days), I decided to re-incarnate the idea as &lt;a href=&quot;http://githero.es&quot;&gt;GitHeroes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Premise&lt;/h2&gt;
&lt;p&gt;The premise was simple:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Login using GitHub&lt;/li&gt;
  &lt;li&gt;Nominate your personal hero (you could nominate as many as you want)&lt;/li&gt;
  &lt;li&gt;Publicize your nomination so you could get fellow hackers to vote for them&lt;/li&gt;
  &lt;li&gt;Put up a leaderboard so you could see how your hero was doing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This re-incarnation of the app did away with problems of deciding &amp;#8220;canonical&amp;#8221; objects for hackers being nominated, election fraud and seemed a much more elegant app.&lt;/p&gt;
&lt;h2&gt;Behind The Scenes&lt;/h2&gt;
&lt;p&gt;The app was built using Rails 3.1, CoffeeScript, Twitter Bootstrap, PostgreSQL and is hosted on Heroku. It uses &lt;a href=&quot;https://github.com/intridea/omniauth&quot;&gt;Omniauth&lt;/a&gt; for GitHub OAuth integration (Omniauth by the way is a fantastic library) and with a &lt;a href=&quot;http://www.quora.com/What-font-is-used-in-the-Github-logo&quot;&gt;little help from Quora&lt;/a&gt;, I even found the GitHub font so that I could design a good-enough logo.&lt;/p&gt;
&lt;h3&gt;Ranking using PostgreSQL&lt;/h3&gt;
&lt;p&gt;The most interesting bit for me about GitHeroes is the way the ranking/leaderboard stuff is done. I contemplated using Redis to do ranking, but I am quite wary of introducing dependencies to a Rails stack unless it&amp;#8217;s absolutely necessary.&lt;/p&gt;
&lt;p&gt;Turns out, it &lt;strong&gt;is&lt;/strong&gt; unnecessary because Postgres (9.0 and above) provides with you &lt;a href=&quot;http://www.postgresql.org/docs/9.1/static/tutorial-window.html&quot;&gt;window functions&lt;/a&gt; which let you run calculations across a set of rows in a table. You can choose to group similar rows together, but they also work across the entire table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sidenote&lt;/strong&gt;: Postgres 9.0 is not available on the shared database plans available on &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; so you will need to provision your own or upgrade to the paid plans.&lt;/p&gt;
&lt;p&gt;How voting is designed is quite simple, here is the class:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1638263.js?file=vote.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;As you may notice, there is a counter-cache for the hero being voted for and the &lt;code&gt;votes_received&lt;/code&gt; is incremented on Hero every time a vote is cast.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;votes_received&lt;/code&gt; column is then used as the column to rank while choosing heroes for the leaderboard.&lt;/p&gt;
&lt;p&gt;This is the function used in the &lt;code&gt;Hero&lt;/code&gt; class to get the top 20 heroes ranked by votes across all locations:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1638263.js?file=global_leaderboard.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;&amp;#8230;and this is the function used to get the top 20 hereoes by votes in a given location:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1638263.js?file=leaderboard_by_location.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;Note: You will need to add a descending order index on votes_received, since by default btree indexes on Postgres use the ascending order:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CREATE INDEX desc_votes_recvd_idx on heros(votes_received DESC NULLS LAST);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As you can see from the query plan below, the query is quite efficient and works like a charm: (although I probably should run benchmarks against a larger table)&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1638263.js?file=query_plan_for_global_leaderboard.sql&quot;&gt;&lt;/script&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;GitHeroes was a fun little project that took two days to build and got to the front page of &lt;a href=&quot;http://news.ycombinator.com/item?id=3415938&quot;&gt;Hacker News&lt;/a&gt;. But it also gave me a chance to explore some neat Postgres features which will be useful for the other app that we are building &amp;#8211; &lt;a href=&quot;http://getdenso.com&quot;&gt;Denso&lt;/a&gt;.&lt;/p&gt;</content>
   <author>
     <name>Devs at Anideo</name>
     <uri>http://dev.anideo.com/</uri>
   </author>
 </entry>
 
 <entry>
   <title>The Inaugural Anideo Hackathon</title>
   <link href="http://dev.anideo.com/2012/01/14/the-inaugural-anideo-hackathon.html"/>
   <updated>2012-01-14T00:00:00+08:00</updated>
   <id>http://dev.anideo.com/2012/01/14/the-inaugural-anideo-hackathon</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2012/01/14/the-inaugural-anideo-hackathon.html&quot;&gt;The Inaugural Anideo Hackathon&lt;/a&gt;&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;14 Jan 2012 &amp;#8211; Singapore&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/ajhit406&quot;&gt;AJ&lt;/a&gt;&amp;#8217;s been floating the idea of a regularly scheduled hackathon at Anideo for a few months now. He believes (and I concur) that we need a break from our own product building to do something outside our collective zones of comfort.&lt;/p&gt;
&lt;p&gt;We finally got off our butts and managed to put one together last week. We wanted to hold it at our office and we weren&amp;#8217;t sure what the response would be like and we didn&amp;#8217;t want to risk overcrowding our cosy little space, so we invited a few friends over, got some pizza, stocked up on Red Bull and stayed from 7pm on a Thursday to 5am the next morning.&lt;/p&gt;
&lt;p&gt;It was great fun to take off our minds off work and do something different, and it was great to talk to friends about pure tech stuff without the startup bullshit that has taken over our lives &amp;#8211; more on that later.&lt;/p&gt;
&lt;p&gt;We successfuly completed the hackathon and are proud to report on some of the projects that came up during the event:&lt;/p&gt;
&lt;h4&gt;KNPathTableViewController&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://kentnguyen.com&quot;&gt;Kent&lt;/a&gt; has been taking care of our mobile needs very ably for the last few months and has been generating stellar work week over week. We&amp;#8217;ve all ogled at Path&amp;#8217;s new beautiful interface and Kent took it on himself to do a version of the scrolling clock which appears whenever you scroll down your Path timeline. The result of his work is &lt;a href=&quot;https://github.com/kentnguyen/KNPathTableViewController&quot;&gt;here&lt;/a&gt;, free for anyone to use.&lt;/p&gt;
&lt;h4&gt;underscore.cocoa&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://decisivebits.com&quot;&gt;Peter&lt;/a&gt;&amp;#8216;s been making great contributions to the Cocoa &lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt; community over the last few weeks with &lt;a href=&quot;https://github.com/petejkim/specta&quot;&gt;Specta&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/petejkim/expecta&quot;&gt;Expecta&lt;/a&gt;, but his work during the hackathon consisted of porting underscore.js to Cocoa. You can track his progress on GitHub &lt;a href=&quot;https://github.com/petejkim/underscore.cocoa&quot;&gt;here&lt;/a&gt;. I still haven&amp;#8217;t started doing &lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt; on Cocoa (in fact I haven&amp;#8217;t done Cocoa programming in a while) but Peter&amp;#8217;s set of great tools will enable me to cross the chasm.&lt;/p&gt;
&lt;h4&gt;LazyPost&lt;/h4&gt;
&lt;p&gt;This is still a working name but AJ came up with an idea that involves location and postcards. It&amp;#8217;s a nifty little app and we&amp;#8217;ll give you more details once its ready to ship (which is hopefully very soon).&lt;/p&gt;
&lt;h4&gt;proxee.io&lt;/h4&gt;
&lt;p&gt;I personally worked on &lt;a href=&quot;http://proxee.io&quot;&gt;proxee.io&lt;/a&gt; &amp;#8211; I want a better web debugging proxy to test out iOS app APIs. My current solution is to use Charles which is both a Java app as well as quite expensive, hence my need for proxee.io.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://andadinosaur.com&quot;&gt;Zhenyi&lt;/a&gt; helped with the design of the app and my arguments with &lt;a href=&quot;http://choonkeat.com&quot;&gt;Choon Keat&lt;/a&gt; over the need for a local proxy vs a hosted one, helped sharpen my reasonings for making it. Choon Keat is in fact working on a hosted proxy which lets you rewrite responses to a server/client based on a set of rules and lets you record traces of &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; calls, which can be shared with others.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t think I&amp;#8217;ve convinced him yet of the need for my take on a proxy, but hopefully once it&amp;#8217;s live! ;)&lt;/p&gt;
&lt;h4&gt;Lessons&lt;/h4&gt;
&lt;p&gt;I personally enjoyed the camaraderie and the arguing a lot and enjoyed working on a completely different problem than my &amp;#8220;day job&amp;#8221;. We need to work harder on maybe making sure that people collaborate more during the hackathons, but it was definitely a good first step.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s to many more, so stay tuned!&lt;/p&gt;</content>
   <author>
     <name>Devs at Anideo</name>
     <uri>http://dev.anideo.com/</uri>
   </author>
 </entry>
 
 <entry>
   <title>How we setup Amazon Cloudfront to play nice with Rails 3.0.x on Heroku</title>
   <link href="http://dev.anideo.com/2012/01/03/how-we-setup-amazon-cloudfront-to-play-nice-with-rails.html"/>
   <updated>2012-01-03T00:00:00+08:00</updated>
   <id>http://dev.anideo.com/2012/01/03/how-we-setup-amazon-cloudfront-to-play-nice-with-rails</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2012/01/03/how-we-setup-amazon-cloudfront-to-play-nice-with-rails.html&quot;&gt;How we setup Amazon Cloudfront to play nice with Rails 3.0.x on Heroku&lt;/a&gt;&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;03 Jan 2012 - Singapore&lt;/p&gt;

&lt;p&gt;As was mentioned in our &lt;a href=&quot;http://dev.anideo.com/2011/12/30/how-moving-to-amazon-cloudfront-increased-our-app-store.html&quot;&gt;previous post&lt;/a&gt;, we recently started using Amazon Cloudfront for our CDN needs. We wanted the performance benefits that we would gain from the move, we certainly didn&amp;#8217;t want it to come at the cost of speed of deployment.&lt;/p&gt;

&lt;p&gt;While the CloudFront custom origin server solution takes care of deployment, there is still the problem of expiring stale assets (especially Javascript and CSS).&lt;/p&gt;

&lt;p&gt;As they say, the two toughest problems in Computer Science are caching, naming things and off-by-one errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asset Fingerprinting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The problem of expiring stale content for CDN&amp;#8217;s (and browsers) is solved by &lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html#what-is-fingerprinting-and-why-should-i-care&quot;&gt;asset fingerprinting&lt;/a&gt; as part of Rails 3.1&amp;#8217;s Asset Pipelining feature.&lt;/p&gt;

&lt;p&gt;Every file in the app/assets directory in Rails 3.1 is &amp;#8220;compiled&amp;#8221; as part of the &lt;code&gt;rake assets:precompile&lt;/code&gt; Rake task and the asset fingerprint is appended to the each file&amp;#8217;s path and copied over to public/. The asset fingerprint is an MD5 digest of the contents of each file - so if a file is changed (for e.g. and image is changed or you change something in your CSS), the MD5 of the asset will change, and hence that particular asset will be &amp;#8216;expired&amp;#8217;.&lt;/p&gt;

&lt;p&gt;The blog post that I referenced from the &lt;a href=&quot;http://blog.opengovernment.org/2011/02/10/cloudfront-s3-rails-and-jammit-on-apache/&quot;&gt;Open Government&lt;/a&gt;, uses the SHA of the most recent Git commit as the asset fingerprint. While that is a simple solution, it is quite inefficient. Think about it - any time you make a change to your site - (including model code or a change in a Rake task), your assets will be expired, even though technically the assets haven&amp;#8217;t changed.&lt;/p&gt;

&lt;p&gt;We don&amp;#8217;t change our CSS/JS/images that often, but we do make changes to our business logic quite often (and deploy multiple times a day), so this solution won&amp;#8217;t fly and defeats the purpose of the CDN, since content will always be expired.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asset Fingerprinting without Sprockets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What we came up with is a better solution, which takes a digest of the entire public/ directory under Rails.root. It&amp;#8217;s still less efficient than Sprockets&amp;#8217; asset fingerprinting, since in our solution the fingerprint is a hash of the entire directory and not each file. So even if you make a change to a single file, an unrelated file under the public/ will also be expired even if it hasn&amp;#8217;t changed.&lt;/p&gt;

&lt;p&gt;The hash of the public/ directory is stored in a file called &lt;strong&gt;assets.fingerprint&lt;/strong&gt; under Rails.root, and is generated like &lt;a href=&quot;https://gist.github.com/1554094&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/1554094.js?file=set_asset_fingerprint.rb&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is a function of a deploy Rake task which performs pre-flight checks such as these before pushing to Heroku.&lt;/p&gt;

&lt;p&gt;We define a constant called REVISION which is defined in &lt;code&gt;config/initializers/asset_fingerprint.rb&lt;/code&gt; thusly:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;REVISION = File.read(Rails.root.join(&amp;#8216;assets.fingerprint&amp;#8217;)).strip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8230;and in application.rb, the assets path is prepended with the hash as part of the path.&lt;/p&gt;

&lt;p&gt;We also make sure that we use Rack::Rewrite to rewrite paths to the assets to ignore the hash and that the assets host points to the Amazon CDN.&lt;/p&gt;

&lt;p&gt;Our entire application.rb is here for your reference: &lt;a href=&quot;https://gist.github.com/1554090&quot;&gt;&lt;a href=&quot;https://gist.github.com/1554090&quot;&gt;https://gist.github.com/1554090&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</content>
   <author>
     <name>Devs at Anideo</name>
     <uri>http://dev.anideo.com/</uri>
   </author>
 </entry>
 
 <entry>
   <title>How moving to Amazon Cloudfront increased our App Store conversion rate by 250%</title>
   <link href="http://dev.anideo.com/2011/12/30/how-moving-to-amazon-cloudfront-increased-our-app-store.html"/>
   <updated>2011-12-30T00:00:00+08:00</updated>
   <id>http://dev.anideo.com/2011/12/30/how-moving-to-amazon-cloudfront-increased-our-app-store</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;/2011/12/30/how-moving-to-amazon-cloudfront-increased-our-app-store.html&quot;&gt;How moving to Amazon Cloudfront increased our App Store conversion rate by 250%&lt;/a&gt;&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;30 Dec 2011 - Singapore&lt;/p&gt;

&lt;p&gt;So as you may know, we&amp;#8217;ve been working on &lt;a href=&quot;http://bit.ly/densoapp&quot;&gt;Denso&lt;/a&gt; for a while now, and our primary source of marketing (after the initial wave of PR via &lt;a href=&quot;http://facebook.com/saverin&quot;&gt;Eduardo&lt;/a&gt;) has been our website. We post interesting videos once in a while to Hacker News, Reddit, Twitter and Facebook, thus generating inbound traffic.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://news.ycombinator.com/item?id=3346674&quot;&gt;Hacker News story&lt;/a&gt; about &lt;a href=&quot;http://getdenso.com/videos/2711806-december-08-2011-ed-gillespie-part-3&quot;&gt;Jon Stewart&amp;#8217;s takedown of scammy iOS games&lt;/a&gt; generated a record number of visits to &lt;a href=&quot;http://getdenso.com&quot;&gt;getdenso.com&lt;/a&gt;, but unfortunately, that number didn&amp;#8217;t correlate well with the App Store downloads for that period. What we noticed was that our site appeared slow (even though New Relic indicated that our website stood up quite well against the onslaught) - and the reason was that our static assets (Javascript and CSS) were taking too long to load and would occasionally even 504.&lt;/p&gt;

&lt;p&gt;This, was obviously, unacceptable.&lt;/p&gt;

&lt;p&gt;We researched a bunch of ways on how we can improve the speed of the site, and naturally Amazon Cloudfront ranked very high among our options. But we needed a way for it not to interfere with our existing deployment strategy (which is git push heroku master). We chanced upon this &lt;a href=&quot;http://blog.opengovernment.org/2011/02/10/cloudfront-s3-rails-and-jammit-on-apache/&quot;&gt;excellent resource&lt;/a&gt; which basically gives a detailed tutorial on setting up a custom origin server on CloudFront. With Heroku, its not as straightforward as the Open Government tutorial makes it out to be - there will be another blog post coming up on the tweaks that we implemented.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before and After&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We switched over to our shiny new CDN solution on the 16th of December.&lt;/p&gt;

&lt;p&gt;Before the 16th, our App-Store-downloads-to-web-visits ratio was hovering around &lt;strong&gt;6-8%&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After the CDN deployment, our App-Store-downloads-to-web-visits ratio is now a healthier &lt;strong&gt;21-28%.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moral Of the Story&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obviously the moral of the story is not for everyone to move over to a CDN. A lot of other iOS app downloads are probably not driven by their web cousins, so it won&amp;#8217;t &lt;em&gt;&lt;strong&gt;always &lt;/strong&gt;&lt;/em&gt;make sense for you to optimize web performance.&lt;/p&gt;

&lt;p&gt;Our biggest takeway is - run experiments, follow up on performance, try to find out root causes for weaknesses, and ruthlessly tackle them.&lt;/p&gt;
</content>
   <author>
     <name>Devs at Anideo</name>
     <uri>http://dev.anideo.com/</uri>
   </author>
 </entry>
 

</feed>